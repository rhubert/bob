# Bob build tool
# Copyright (C) 2016  TechniSat Digital GmbH
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Generate a completion reply for a list of given words. By default a space is
# appended, though this might be changed.
#
# Arguments:
# 1: List of possible completion words
# 2: A prefix to be added to each possible completion word (optional)
# 3: A suffix to be appended to each possible completion word (optional, default: ' ').
__bob_complete_words()
{
   local c i=0 IFS=$' \t\n'
   for c in $1 ; do
      c="${2-}$c${3- }"
      if [[ $c == "$cur"* ]]; then
         COMPREPLY[i++]="$c"
      fi
   done
}

__bob_path_hash="invalid"
__bob_path_content=( )

__bob_complete_path()
{
   local i prefix result=( )

   for i in "${COMP_WORDS[@]}"; do
      case "$i" in
         --sandbox)
            sandbox="--sandbox"
            ;;
         --no-sandbox)
            sandbox="--no-sandbox"
            ;;
      esac
   done

   case "$cur" in
      -*)
         __bob_complete_words "-h --help $1"
         ;;
      *)
         if [[ $cur == */* ]] ; then
            prefix="${cur%/*}/"
         else
            prefix=""
         fi
         local hash="$sandox $(find classes/ recipes/ *.yaml -name '*.yaml' 2>/dev/null | xargs md5sum | md5sum)"
         if [[ "$hash" != "$__bob_path_hash" ]] ; then
            __bob_path_content=( $($bob ls -rp $sandbox 2>/dev/null) )
            __bob_path_hash="$hash"
         fi
         for i in "${__bob_path_content[@]}" ; do
            if [[ $i == "$prefix"* ]] ; then
               i="${i#$prefix}"
               i="${i%%/*}"
               result+=( "$i" )
            fi
         done
         __bob_complete_words "${result[*]}" "$prefix" "/"
         ;;
   esac
}

__bob_clean()
{
   __bob_complete_words "-h --help --dry-run -v --verbose"
}

__bob_cook()
{
   if [[ "$prev" = "--destination" ]] ; then
      COMPREPLY=( $(compgen -o dirnames "$cur") )
   elif [[ "$prev" = "--download" ]] ; then
         __bob_complete_words "yes no deps"
   elif [[ "$prev" = "-c" ]] ; then
      COMPREPLY=( $(compgen -a -f -o dirnames "$cur" | cut -f 1 -d '.' ) )
   else
      __bob_complete_path "-e -f --force -n --no-deps -b --build-only --clean --incremental --resume -q --quiet --upload --download --sandbox --no-sandbox -v --verbose"
   fi
}

__bob_build()
{
   sandbox="--sandbox"
   __bob_cook "$@"
}

__bob_dev()
{
   sandbox="--no-sandbox"
   __bob_cook "$@"
}

__bob_ls()
{
   __bob_complete_path "-a --all -r --recursive --sandbox --no-sandbox"
}

__bob_jenkins_add()
{
   sandbox="--no-sandbox"

   case "$cur" in
      -*)
         __bob_complete_words "-h --help -r --root -p --prefix"
         ;;
      *)
         if [[ "$prev" = "-r" ]] ; then
            __bob_complete_path
         fi
         ;;
   esac
}

__bob_jenkins_export()
{
   local c jenkins dir

   while [[ $parse_pos -lt $COMP_CWORD ]] ; do
      c="${COMP_WORDS[parse_pos]}"
      : $((parse_pos++))
      case "$c" in
         -*) ;;
         *)
            if [[ -z $jenkins ]] ; then
               jenkins="$c"
            elif [[ -z $dir ]] ; then
               dir="$c"
            fi
            ;;
      esac
   done

   case "$cur" in
      -*)
         __bob_complete_words "-h --help"
         ;;
      *)
         if [[ -z $jenkins ]] ; then
            __bob_complete_words "$($bob jenkins ls)"
         elif [[ -z $dir ]] ; then
            COMPREPLY=( $(compgen -o dirnames "$cur") )
         fi
         ;;
   esac
}

__bob_jenkins_ls()
{
   __bob_complete_words "-h --help -v --verbose"
}

__bob_jenkins_prune()
{
   case "$cur" in
      -*)
         __bob_complete_words "-h --help"
         ;;
      *)
         __bob_complete_words "$($bob jenkins ls)"
         ;;
   esac
}

__bob_jenkins_push()
{
   case "$cur" in
      -*)
         __bob_complete_words "-h --help -f --force --no-trigger"
         ;;
      *)
         __bob_complete_words "$($bob jenkins ls)"
         ;;
   esac
}

__bob_jenkins_rm()
{
   case "$cur" in
      -*)
         __bob_complete_words "-h --help -f --force"
         ;;
      *)
         __bob_complete_words "$($bob jenkins ls)"
         ;;
   esac
}

__bob_jenkins_set_url()
{
   case "$cur" in
      -*)
         __bob_complete_words "-h --help"
         ;;
      *)
         __bob_complete_words "$($bob jenkins ls)"
         ;;
   esac
}

__bob_jenkins_set_options()
{
   sandbox="--no-sandbox"

   case "$cur" in
      -*)
         __bob_complete_words "-h --help -n --nodes -p --prefix --add-root --del-root -D -U --upload --no-upload"
         ;;
      *)
         if [[ "$prev" = "--add-root" ]] ; then
            __bob_complete_path
         else
            __bob_complete_words "$($bob jenkins ls)"
         fi
         ;;
   esac
}

__bob_jenkins()
{
   __bob_subcommands "add export ls prune push rm set-url set-options" "jenkins"
}

__bob_project_generators()
{
   local i c command completion_func

   while [[ $parse_pos -lt $COMP_CWORD ]] ; do
      c="${COMP_WORDS[parse_pos]}"
      : $((parse_pos++))
      case "$c" in
         -*) ;;
         *) command="$c" ; break ;;
      esac
   done

   if [[ -z "$command" ]] ; then
      case "$cur" in
         -*)
            __bob_complete_words "-D -E -e -n -c"
            ;;
         *)
            __bob_complete_words "$1"
            ;;
      esac
   else
       __bob_complete_path "--help"
   fi
}

__bob_project()
{
    __bob_project_generators "$($bob project --list)"
}

__bob_subcommands()
{
   local i c command completion_func

   while [[ $parse_pos -lt $COMP_CWORD ]] ; do
      c="${COMP_WORDS[parse_pos]}"
      : $((parse_pos++))
      case "$c" in
         -*) ;;
         *) command="$c" ; break ;;
      esac
   done

   if [[ -z "$command" ]] ; then
      case "$cur" in
         -*)
            __bob_complete_words "-h --help"
            ;;
         *)
            __bob_complete_words "$1"
            ;;
      esac
   else
      local completion_func="__bob_${2-}${2+_}${command//-/_}"
      declare -f $completion_func >/dev/null && $completion_func
   fi
}

# Top level completion function.
__bob()
{
   local parse_pos=1 bob="$1" cur="$2" prev="$3"
   local sandbox=""
   __bob_subcommands "build clean dev ls jenkins project"
}

# noquote is quite new...
complete -o noquote -o nospace -F __bob bob 2>/dev/null || \
   complete -o nospace -F __bob bob
# colon is no word break character
COMP_WORDBREAKS=${COMP_WORDBREAKS//:/}
